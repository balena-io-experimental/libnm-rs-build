--- src/analysis/conversion_type.rs
+++ src/analysis/conversion_type.rs
@@ -64,6 +64,7 @@ impl ConversionType {
                 None => ConversionType::Unknown,
                 IntPtr => ConversionType::Direct,
                 UIntPtr => ConversionType::Direct,
+                InAddr => ConversionType::Direct,
                 Unsupported => ConversionType::Unknown,
             },
             Alias(ref alias) if alias.c_identifier == "GQuark" => ConversionType::Scalar,
diff --git src/analysis/ffi_type.rs src/analysis/ffi_type.rs
index 7741211..3e9627c 100644
--- src/analysis/ffi_type.rs
+++ src/analysis/ffi_type.rs
@@ -88,6 +88,7 @@ fn ffi_inner(env: &Env, tid: TypeId, inner: &str) -> Result {
                 SSize => "libc::ssize_t",
                 Float => "libc::c_float",
                 Double => "libc::c_double",
+                InAddr => "libc::in_addr_t",
                 UniChar => "u32",
                 Utf8 => "libc::c_char",
                 Filename => "libc::c_char",
diff --git src/analysis/rust_type.rs src/analysis/rust_type.rs
index 1d73208..78d0778 100644
--- src/analysis/rust_type.rs
+++ src/analysis/rust_type.rs
@@ -107,6 +107,8 @@ pub fn rust_type_full(
                 Float => ok("f32"),
                 Double => ok("f64"),
 
+                InAddr => ok("in_addr_t"),
+
                 UniChar => ok("char"),
                 Utf8 => if ref_mode.is_ref() {
                     ok("str")
diff --git src/codegen/sys/ffi_type.rs src/codegen/sys/ffi_type.rs
index e501988..620f69b 100644
--- src/codegen/sys/ffi_type.rs
+++ src/codegen/sys/ffi_type.rs
@@ -89,6 +89,7 @@ fn ffi_inner(env: &Env, tid: library::TypeId, mut inner: String) -> Result {
                 SSize => "ssize_t",
                 Float => "c_float",
                 Double => "c_double",
+                InAddr => "in_addr_t",
                 UniChar => "u32",
                 Utf8 => "c_char",
                 Filename => "c_char",
diff --git src/library.rs src/library.rs
index c476394..45643ee 100644
--- src/library.rs
+++ src/library.rs
@@ -218,6 +218,7 @@ pub enum Fundamental {
     Type,
     IntPtr,
     UIntPtr,
+    InAddr,
     //Same encoding as Filename but can contains any string
     //Not defined in GLib directly
     OsString,
@@ -246,7 +247,8 @@ impl Fundamental {
             Fundamental::Size |
             Fundamental::SSize |
             Fundamental::Float |
-            Fundamental::Double => false,
+            Fundamental::Double |
+            Fundamental::InAddr => false,
             _ => true,
         }
     }
@@ -286,6 +288,7 @@ const FUNDAMENTAL: &[(&str, Fundamental)] = &[
     ("GType", Fundamental::Type),
     ("gintptr", Fundamental::IntPtr),
     ("guintptr", Fundamental::UIntPtr),
+    ("in_addr_t", Fundamental::InAddr),
     //TODO: this is temporary name, change it when type added to GLib
     ("os_string", Fundamental::OsString),
 ];
